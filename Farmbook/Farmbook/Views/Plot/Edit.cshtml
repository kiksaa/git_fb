@model Farmbook.Models.landplot
@{
    Layout = "~/Views/Shared/_Layaccount.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>FARMBOOK - แก้ไขข้อมูลแปลง</title>
    <!-- Custom fonts for this template-->
    <link href="~/Content/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i" rel="stylesheet">

    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
    <style type="text/css">
        #div {
            width: 350px;
            height: 880px;
            background-color: #FFF;
            overflow: scroll;
        }
        /* element that contains the map. */
        #map {
            height: 100%;
        }

        html {
            height: 100%
        }

        body {
            height: 100%;
            margin: 0;
            padding: 0;
            font-family: tahoma, "Microsoft Sans Serif", sans-serif, Verdana;
            font-size: 12px;
        }
        /* css กำหนดความกว้าง ความสูงของแผนที่ */
        #map_canvas {
            position: relative;
            height: 100%; /*  margin-top:100px;*/
        }

        #contain_map {
            position: relative;
            height: 100%;
        }
        /* css ของส่วนการกำหนดจุดเริ่มต้น และปลายทาง */
        #showDD {
            position: absolute;
            bottom: 5px;
            /*    background-color:#000;  */
            color: #FFF;
        }

        #show_form_data {
            margin: auto;
            width: 550px;
        }

        #hand_b {
            width: 31px;
            height: 31px;
            cursor: pointer;
            background-image: url(../../Content/img/Bsu.png);
        }

            #hand_b.selected {
                background-image: url(../../Content/img/Bsd.png);
            }

        #shape_b {
            width: 31px;
            height: 31px;
            cursor: pointer;
            background-image: url(../../Content/img/Bpu.png);
        }

            #shape_b.selected {
                background-image: url(../../Content/img/Bpd.png);
            }
    </style>

    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
    <script type="text/javascript">
        var COLORS = [
            ["red", "#ff0000"],
            ["orange", "#ff8800"],
            ["green", "#008000"],
            ["blue", "#000080"],
            ["purple", "#800080"]
        ];
        var colorIndex_ = 0;
        var listener;
        /* ส่วนของการกำหนดค่า สำหรับคำนวณพื้นที่ */
        var earthRadiusMeters = 6367460.0;
        var metersPerDegree = 2.0 * Math.PI * earthRadiusMeters / 360.0;
        var degreesPerRadian = 180.0 / Math.PI;
        var radiansPerDegree = Math.PI / 180.0;
        var metersPerKm = 1000.0;
        var map; // กำหนดตัวแปร map ไว้ด้านนอกฟังก์ชัน เพื่อให้สามารถเรียกใช้งาน จากส่วนอื่นได้
        var GGM; // กำหนดตัวแปร GGM ไว้เก็บ google.maps Object จะได้เรียกใช้งานได้ง่ายขึ้น
        var geocoder;
        var poly;
        var polygon;
        var marker = [];
        var Points = [];
        var path = [];
        var arr_path = [];
        function swap_class(buttonId) {
            $("#hand_b").removeClass("selected");
            $("#shape_b").removeClass("selected");
            $("#" + buttonId).addClass("selected");
        }
        function stopEditing() {
            swap_class("hand_b");
            $("#path_arr").val("");
            $("#distance").val("");
            $("#area_data").val("");
            if (listener != undefined) {
                GGM.event.removeListener(listener);
            }
            if (polygon != undefined) {
                console.log("IN");
                path = [];
                console.log("OUT");
                console.log(path);
                polygon.setMap(null);
            }
            if (marker.length > 0) {
                for (i = 0; i < marker.length; i++) {
                    marker[i].setMap(null);
                }
            }
        }

        function getColor(named) {
            return COLORS[(colorIndex_++) % COLORS.length][named ? 0 : 1];
        }

        function getIcon(color) {
            var icon = new GIcon();
            icon.image = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png";
            icon.iconSize = new GSize(32, 32);
            icon.iconAnchor = new GPoint(15, 32);
            return icon;
        }

        function startShape() {
            swap_class("shape_b");
            var color = getColor(true);
            var polygonOptions = {
                strokeColor: color,
                geodesic: true,
                strokeOpacity: 1.0,
                strokeWeight: 3,
                fillColor: color,
                fillOpacity: 0.35,
                @*editable: true,*@
            }
            polygon = new GGM.Polygon(polygonOptions);
            polygon.setMap(map);

            startDrawing_polygon(polygon, color);
        }
        function startDrawing_polygon(polygon, color) {
            var i = 0;
            var Points = [];
            path = polygon.getPath();
            var data_path = "";
            listener = GGM.event.addListener(map, 'click', function (event) {//สร้างจุด
                var val_latlng = [event.latLng.lat(), event.latLng.lng()];

                var geocoder = new GGM.Geocoder();
                $("#geocoder").val(geocoder);
                @*console.log(val_latlng[0]);
                console.log(val_latlng[1]);*@
                path.push(event.latLng);
                Points.push(event.latLng);
                data_path += val_latlng[0] + "," + val_latlng[1] + "\r\n";
                $("#path_arr").val(data_path);
                $("#distance").val(polygon.inKm());

                calculateArea(Points);
                // Add a new marker at the new plotted point on the polyline.
                var image = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png";
                marker[i] = new GGM.Marker({
                    position: event.latLng,
                    animation: GGM.Animation.DROP,//เด้ง
                    @*title: "" + event.description + "" + i,*@
                    title: "" + i,
                    draggable: true,
                    map: map,
                    icon: image
                });

                GGM.event.addListener(marker[i], 'dragend', function () {//ย้ายจุด
                    path = [];
                    var Points = [];
                    var data_path = "";
                    polygon.setPath(path);
                    path = polygon.getPath();

                    $.each(marker, function (m, n) {
                        path.push(marker[m].getPosition());
                        Points.push(marker[m].getPosition());
                        var val_latlng = marker[m].getPosition();
                        data_path += val_latlng.lat() + "," + val_latlng.lng() + "\r\n";
                    });
                    calculateArea(Points);
                    $("#path_arr").val(data_path);
                    $("#distance").val(polygon.inKm());
                });
                i++;
            });
        }
        function calculateArea(points) {
            if (points.length > 2) {
                var areaMeters2 = PlanarPolygonAreaMeters2(points);
                if (areaMeters2 > 1000000.0)
                {
                    areaMeters2 = SphericalPolygonAreaMeters2(points);
                }
                var area = areaMeters2 / 1600;
                var aa = parseInt(areaMeters2 / 1600);
                var bb = parseInt((areaMeters2 % 1600) / 400);
                var cc = parseInt(((areaMeters2 % 1600) % 400) / 4);
                $("#data").val(areaMeters2.toFixed(2));
                $("#area_data").val(aa + " ไร่ " + bb + " งาน " + cc + " ตารางวา"); // เปลี่ยน type => string
                $("#area").val(area.toFixed(2));
                @*$("#area").val(aa.toFixed(2));*@
                @*$("#area_data").val(aa + "  " + bb+ "  " + cc + " ");*@
                $("#lat").val(points[0].lat());
                $("#lng").val(points[0].lng());
            }
        }
        function PlanarPolygonAreaMeters2(points) {
            var a = 0.0;
            for (var i = 0; i < points.length; ++i) {
                var j = (i + 1) % points.length;
                var xi = points[i].lng() * metersPerDegree * Math.cos(points[i].lat() * radiansPerDegree);
                var yi = points[i].lat() * metersPerDegree;
                var xj = points[j].lng() * metersPerDegree * Math.cos(points[j].lat() * radiansPerDegree);
                var yj = points[j].lat() * metersPerDegree;
                a += xi * yj - xj * yi;
            }
            return Math.abs(a / 2.0);
        }
        function SphericalPolygonAreaMeters2(points) {
            var totalAngle = 0.0;
            //alert(points[0]);
            for (i = 0; i < points.length; ++i) {
                var j = (i + 1) % points.length;
                var k = (i + 2) % points.length;
                totalAngle += Angle(points[i], points[j], points[k]);
            }
            var planarTotalAngle = (points.length - 2) * 180.0;
            var sphericalExcess = totalAngle - planarTotalAngle;
            if (sphericalExcess > 420.0) {
                totalAngle = points.length * 360.0 - totalAngle;
                sphericalExcess = totalAngle - planarTotalAngle;
            }
            else if (sphericalExcess > 300.0 && sphericalExcess < 420.0) { sphericalExcess = Math.abs(360.0 - sphericalExcess); }
            return sphericalExcess * radiansPerDegree * earthRadiusMeters * earthRadiusMeters;
        }
        function Angle(p1, p2, p3) {
            var bearing21 = Bearing(p2, p1);
            var bearing23 = Bearing(p2, p3);
            var angle = bearing21 - bearing23;
            if (angle < 0.0) angle += 360.0;
            return angle;
        }
        function Bearing(from, to) {
            var lat1 = from.lat() * radiansPerDegree;
            var lon1 = from.lng() * radiansPerDegree;
            var lat2 = to.lat() * radiansPerDegree;
            var lon2 = to.lng() * radiansPerDegree;
            var angle = -Math.atan2(Math.sin(lon1 - lon2) * Math.cos(lat2), Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon1 - lon2));
            if (angle < 0.0) angle += Math.PI * 2.0;
            angle = angle * degreesPerRadian;
            return angle;
        }

        function initialize() { // ฟังก์ชันแสดงแผนที่
            GGM = new Object(google.maps); // เก็บตัวแปร google.maps Object ไว้ในตัวแปร GGM
            // กำหนดจุดเริ่มต้นของแผนที่
            var my_Latlng = new GGM.LatLng(14.998954282668816, 102.09925745900672);
            var my_mapTypeId = GGM.MapTypeId.HYBRID; // กำหนดรูปแบบแผนที่ที่แสดง
            // กำหนด DOM object ที่จะเอาแผนที่ไปแสดง ที่นี้คือ div id=map_canvas
            var my_DivObj = $("#map_canvas")[0];
            // กำหนด Option ของแผนที่
            var myOptions = {
                zoom: 7, // กำหนดขนาดการ zoom
                center: my_Latlng, // กำหนดจุดกึ่งกลาง
                mapTypeId: my_mapTypeId, // กำหนดรูปแบบแผนที่
            };
            map = new GGM.Map(my_DivObj, myOptions);// สร้างแผนที่และเก็บตัวแปรไว้ในชื่อ map

            GGM.LatLng.prototype.kmTo = function (a) {
                var e = Math, ra = e.PI / 180;
                var b = this.lat() * ra, c = a.lat() * ra, d = b - c;
                var g = this.lng() * ra - a.lng() * ra;
                var f = 2 * e.asin(e.sqrt(e.pow(e.sin(d / 2), 2) + e.cos(b) * e.cos
                    (c) * e.pow(e.sin(g / 2), 2)));
                return f * 6378.137;
            }
            GGM.Polyline.prototype.inKm = function (n) {
                var a = this.getPath(n), len = a.getLength(), dist = 0;
                for (var i = 0; i < len - 1; i++) {
                    dist += a.getAt(i).kmTo(a.getAt(i + 1));
                }
                return dist;
            }
            GGM.Polygon.prototype.inKm = function (n) {
                var a = this.getPath(n), len = a.getLength(), dist = 0;
                var dist2 = 0;
                for (var i = 0; i < len - 1; i++) {
                    dist += a.getAt(i).kmTo(a.getAt(i + 1));
                }
                dist2 += a.getAt(len - 1).kmTo(a.getAt(0));
                return dist + dist2;
            }
        }

        $(function () {
            // โหลด สคริป google map api เมื่อเว็บโหลดเรียบร้อยแล้ว
            // ค่าตัวแปร ที่ส่งไปในไฟล์ google map api
            // v=3.2&sensor=false&language=th&callback=initialize
            // v เวอร์ชัน่ 3.2
            // sensor กำหนดให้สามารถแสดงตำแหน่งทำเปิดแผนที่อยู่ได้ เหมาะสำหรับมือถือ ปกติใช้ false
            // language ภาษา th ,en เป็นต้น
            // callback ให้เรียกใช้ฟังก์ชันแสดง แผนที่ initialize
            $("<script/>", {
                "type": "text/javascript",
                @*src: "//maps.google.com/maps/api/js?v=3.2&sensor=false&language=th&callback=initialize"*@
                src: "//maps.google.com/maps/api/js?key=AIzaSyD8tXBjSBPRjCIUTk6rkw9--Cf0TNT4-RU&language=th&callback=initialize&libraries=drawing&v=weekly"
            }).appendTo("body");
        });
    </script>
</head>


<body>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <br />
        <div class="col">
            <h4>ข้อมูลแปลง</h4>
            <hr />
            <div class="row">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="col-sm-2">
                    <div id="div">
                        <div class="form-group">
                            @Html.LabelFor(model => model.farmerName, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.farmerName, (IEnumerable<SelectListItem>)ViewBag.registers, "เลือกชื่อเกษตรกร", htmlAttributes: new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(model => model.farmerName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.plotName, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.plotName, new { htmlAttributes = new { @class = "form-control", required = "required" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.areaCode, htmlAttributes: new { @class = "control-label col-md-10" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.areaCode, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.typeOwnership, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.typeOwnership, (IEnumerable<SelectListItem>)ViewBag.typeownerships, "เลือก", htmlAttributes: new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(model => model.typeOwnership, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.license, htmlAttributes: new { @class = "control-label col-md-10" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.license, (IEnumerable<SelectListItem>)ViewBag.licenses, "เลือก", htmlAttributes: new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(model => model.license, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.titleDeed, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.titleDeed, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.landSlip, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.landSlip, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.landNumber, htmlAttributes: new { @class = "control-label col-md-10" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.landNumber, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.license_img, htmlAttributes: new { @class = "control-label col-md-12" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.license_img, new { htmlAttributes = new { @class = "form-control", type = "file" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.provinceStr, htmlAttributes: new { @class = "control-label col-md-10" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.provinceStr, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @* @Html.LabelFor(model => model.province, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.province, (IEnumerable<SelectListItem>)ViewBag.provinces, "เลือกจังหวัด", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.province, "", new { @class = "text-danger" })
                                </div>*@
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ampherStr, htmlAttributes: new { @class = "control-label col-md-10" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ampherStr, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @* @Html.LabelFor(model => model.ampher, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.ampher, (IEnumerable<SelectListItem>)ViewBag.amphers, "เลือกอำเภอ/เขต", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.ampher, "", new { @class = "text-danger" })
                                </div>*@
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.districtStr, htmlAttributes: new { @class = "control-label col-md-10" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.districtStr, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @*@Html.LabelFor(model => model.district, htmlAttributes: new { @class = "control-label col-md-6" })
                                <div class="col-md-10">
                                    @Html.DropDownListFor(model => model.district, (IEnumerable<SelectListItem>)ViewBag.districts, "เลือกตำบล/แขวง", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.district, "", new { @class = "text-danger" })
                                </div>*@
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.coordinatesStar, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.coordinatesStar, new { htmlAttributes = new { @class = "form-control", id = "lat" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.coordinatesEnd, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.coordinatesEnd, new { htmlAttributes = new { @class = "form-control", id = "lng" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.areaPlotS, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.areaPlotS, new { htmlAttributes = new { @class = "form-control", id = "area_data" } })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.areaPlot, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.areaPlot, new { htmlAttributes = new { @class = "form-control", id = "area" } })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.plotDetails, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.plotDetails, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>

                        <hr />
                        <h6>ข้อมูลโครงการ</h6>
                        <br />
                        <div class="form-group">
                            @Html.LabelFor(model => model.plotStatus, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.plotStatus, (IEnumerable<SelectListItem>)ViewBag.status, "เลือกสถานะ", htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.projectName, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(model => model.projectName, (IEnumerable<SelectListItem>)ViewBag.projects, "เลือกโครงการ", htmlAttributes: new { @class = "form-control" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.note, htmlAttributes: new { @class = "control-label col-md-6" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.note, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>

                        <div class="container">
                            <div class="row justify-content-md">
                                @* row justify-content-md-center*@
                                <div class="form-group row">
                                    <div class="col-6">
                                        <a class="btn btn-danger" href="@Url.Action("Edit", "Register", new { id = Model.farmerName })">
                                            <span>
                                                กลับ
                                            </span>
                                        </a>
                                    </div>
                                    <div class="col-6">
                                        <input type="submit" value="บันทึก" class="btn btn-success" />
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>

                </div>
                <div class="col-sm-10">
                    <div id="contain_map">
                        <div id="map_canvas"></div>
                        <div id="showDD">
                            <table>
                                <tr>
                                    <td>
                                        <div id="hand_b" onclick="stopEditing()" />
                                    </td>
                                    @*<td>
                                            <div id="placemark_b" onclick="placeMarker()" />
                                        </td>*@
                                    @*<td>
                                            <div id="line_b" onclick="startLine()" />
                                        </td>*@
                                    <td>
                                        <div id="shape_b" onclick="startShape()" />
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </div>
                    <div id="show_form_data">
                        <!--<form id="form_get_detailMap" name="form_get_detailMap" method="post" action="">
                            Path Array<br />
                            <textarea name="path_arr" id="path_arr" cols="70" rows="5"></textarea>
                            <br />
                            Distance<br />
                            <input name="distance" type="text" id="distance" value="" />
                            Km&nbsp; (หากเป็น poligon จะเป็นขนาดความยาวโดยรอบ)<br />
                            Area<br />-->
                        @* <input name="area_data" type="text" id="area_data" value="" />
                            m<sup>2</sup> (หาร 1000000 จะได้ เท่ากับหน่วย km<sup>2</sup>)<br />*@
                        <!--<input type="submit" name="button" id="button" value="บันทึก" />
                        </form>-->
                    </div>

                </div>
            </div>
        </div>

        <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD8tXBjSBPRjCIUTk6rkw9--Cf0TNT4-RU&callback=initMap&libraries=drawing&v=weekly" async></script>
    }

</body>
</html>